version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: nginx
    ports:
      - "443:443"
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost/api/health-check || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - backend
    networks:
      - app-network
    env_file:
      - frontend/.env
    volumes:
      - media_data:/media
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - frontend/.env
    container_name: backend
    environment:
      - DJANGO_SETTINGS_MODULE=main.settings
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - media_data:/app/media

  db:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend 
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    env_file:
      - frontend/.env
    container_name: frontend
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  media_data:

networks:
  app-network:
    driver: bridge
